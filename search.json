[{"path":"/articles/tstools.html","id":"about-tstools","dir":"Articles","previous_headings":"","what":"About tstools","title":"tstools","text":"tstools package provides convenience functions process, plot export time series. designed users fields official statistics macroeconomics. package focused regular time series monthly quarterly well yearly frequency. summer 2018, functionality provided tstools deals plotting exporting time series manual.","code":""},{"path":"/articles/tstools.html","id":"why-yet-another-time-series-package","dir":"Articles","previous_headings":"About tstools","what":"Why yet another time series package?","title":"tstools","text":"ever thought (heard) believe disgusting create simple plots 2 y-axes different scales., R thing time series bar charts 'properly' - even Excel can . get hype. 2010 label middle year? tstools . words, whenever ‘business’ directly works code, wonder , e.g., legends placed automatically . addition make plotting convenient fun, main goal tstools provide simple environment production reports stand alone plots focus around time series. Instead claiming business wrong, limits flexibility visual concepts flawed, tstools tries provide solution helps economists establishment statisticians work plot conveniently using R. Replace automatically default understand tstools essentially works. package uses R’s base plot functionality sets plethora defaults, combination make plots look nifty. package comes plotting, try guess user wants call tsplot. following sections show examples popular time series plots used hard get R: (line) charts 2 y-axes matching grids charts highlighted time spans slick fan charts time series bar charts negative positive growth contributions charts continous time x-axis charts default legend","code":""},{"path":"/articles/tstools.html","id":"graphs","dir":"Articles","previous_headings":"","what":"Graphs","title":"tstools","text":"tstools produces base R plots. Hence resulting plots can simply extended calls base R plot functions. Base R plots look rather technical raw, tstools tries set ton useful defaults make time series plots look fresh clean start.","code":""},{"path":"/articles/tstools.html","id":"basic-usage","dir":"Articles","previous_headings":"Graphs","what":"Basic usage","title":"tstools","text":"Plotting tstools easy. one generic plotting function called tsplot. Depending time series objects passed function, method dispatcher chooses right method plots graph. following sections walk several applied plotting examples. Horizontal grids suit two axes, automatic shifting series middle period, colors, line types, filling started years many features come convenient defaults. Yet, defaults can adjusted using themes.","code":""},{"path":"/articles/tstools.html","id":"before-we-get-started","dir":"Articles","previous_headings":"Graphs","what":"Before we get started…","title":"tstools","text":"… let’s set data reproducible examples first. Let’s separately can really focus tstools specific code discussion examples. Don’t get confused, plotting really easy, creating random data reading data order make examples reproducible costs us extra lines code .","code":"library(tstools) data(KOF) short <- window(KOF$kofbarometer,   start = c(2007, 1),   end = c(2014, 1) )  # list of time series ts1 <- ts(runif(40, -10, 40), start = c(1995, 1), freq = 4) ts2 <- ts(runif(80, 0, 50), start = c(2000, 1), freq = 12)  tslist <- list() tslist$ts1 <- ts1 tslist$ts2 <- ts2  # data for stacked bar charts... tsb1 <- ts(runif(30, -30, 20), start = c(2010, 1), frequency = 4) tsb2 <- ts(runif(30, 0, 50), start = c(2010, 1), frequency = 4) tsb3 <- ts(runif(30, 0, 50), start = c(2010, 1), frequency = 4)   min_series <- ts(runif(10, -10, 40), start = c(1995, 1), freq = 4) min_series_2 <- ts(runif(25, -20, 40), start = c(1995, 1), freq = 12)  min_series_3 <- ts(runif(25, -20, 40), start = c(1995, 1), freq = 4)    min_li <- list(   series1 = min_series,   series2 = min_series_2,   series3 = min_series_3 )   missings <- ts(c(1, 2, 10, 3, 5, 6, NA, NA, 3, 2, 5, 3, 1, 1),   start = c(1995, 1), freq = 4 )"},{"path":"/articles/tstools.html","id":"single-time-series-line-chart","dir":"Articles","previous_headings":"Graphs","what":"Single time series: line chart","title":"tstools","text":"basic example time series plot time series line chart. object short class ts.","code":"tsplot(short)"},{"path":"/articles/tstools.html","id":"multiple-time-series-same-y-axis-in-one-line-chart","dir":"Articles","previous_headings":"Graphs","what":"Multiple time series (same y-axis) in one line chart","title":"tstools","text":"function tsplot can handle multiple time series objects lists . can either throw multiple comma separated time series objects tsplot  list time series…  Even though tsplot supports mts single time series, clearly recommend pass lists time series tsplot best tested experience. Lists convenient way add legends time series charts tsplot automatically uses names list elements legend. may also define lists adhoc within tsplot call like :","code":"tsplot(ts1, ts2, auto_legend = F) tsplot(tslist, auto_legend = F) tsplot(list(   \"Time Series 1\" = ts1,   \"Time Series 2\" = ts2 ))"},{"path":"/articles/tstools.html","id":"auto-scale-grids-are-there-to-help-you-how-to-configure-them","dir":"Articles","previous_headings":"Graphs","what":"Auto-scale grids are there to help you, how to configure them!","title":"tstools","text":"latest release considerably improved finding suitable scale grids automatically. One improvement ability detect minimum necessary range, also check whether value close x-axis users prefer extra grid little extra breathing room. ’s less 15 percent bottom grid left, tsplot automatically adds another grid. following example tweaks 15 percent margin exaggerated 70 percent, order show extra grid top added y_tick_margin parameter implies now 70 percent outer grid needs stay clean.","code":"tsplot(short,   theme = init_tsplot_theme(y_tick_margin = .7) )"},{"path":"/articles/tstools.html","id":"manual-value-ticks","dir":"Articles","previous_headings":"Graphs","what":"Manual value ticks","title":"tstools","text":"Often just want fixed scale, e.g., index ranges 0 100. Simply use manual_value_ticks_l manual_value_ticks_r arguments specify manual ticks grids. case use 2 y-axes make sure manual value tick vectors length.","code":"tsplot(KOF[\"kofbarometer\"],   manual_value_ticks_l = seq(60, 120, by = 20) )"},{"path":"/articles/tstools.html","id":"fan-charts-plotting-confidence-intervals","dir":"Articles","previous_headings":"Graphs","what":"Fan Charts: Plotting Confidence Intervals","title":"tstools","text":"tsplot can assign confidence intervals every time series line. Simply choose line confidence level define upper lower bound ts object draw shaded confidence bounds around respective series. confidence interval definition basically nested list. sake clear code, recommended define CI list separately like :  KOF data example dataset contains auto.arima point forecast KOF Barometer well upper lower bound 80% 95% confidence level. Notice tsplot forecasting estimation confidence bands, simply takes time series upper lower bounds assigns particular series. Thus ’s agnostic estimation method.","code":"# Define confidence intervals ci <- list(   \"KOF Barometer\" = list(     \"80\" = list(       lb = KOF$baro_lo_80,       ub = KOF$baro_hi_80     ),     \"95\" = list(       lb = KOF$baro_lo_95,       ub = KOF$baro_hi_95     )   ) )  tsplot(list(\"KOF Barometer\" = KOF$baro_point_fc),   ci = ci )"},{"path":"/articles/tstools.html","id":"stacked-bar-chart","dir":"Articles","previous_headings":"Graphs","what":"Stacked Bar Chart","title":"tstools","text":"Sometimes want display time series bar charts. plotting engines understand bar charts something categorical x-axis. even time x-axis, periods treated categories, implies bar centered category tick period. tstools treats x-axis bar charts continous allows quarterly series truly represent entire quarter. Note stacked bar charts imply involved series frequency.  Notice gap size gap bars can adjusted using bar_gap theme parameter.","code":"tsplot(tsb1, tsb2, tsb3,   left_as_bar = T,   auto_legend = F,   theme = init_tsplot_theme(bar_gap = 10) )"},{"path":"/articles/tstools.html","id":"sum-as-line-in-stacked-bar-charts","dir":"Articles","previous_headings":"Graphs","what":"Sum as line in stacked bar charts","title":"tstools","text":"One reasons using bar charts time series add positive negative contributions. case also helpful able add sum components plot per period basis. following draws line top bars represents sum.","code":"tsl <- list(tsb1, tsb2, tsb3) tsplot(tsl,   left_as_bar = T,   manual_value_ticks_l = seq(-40, 100, by = 20),   auto_legend = F,   theme = init_tsplot_theme(sum_as_line = T) )"},{"path":"/articles/tstools.html","id":"stacked-bar-charts-with-different-start-and-end-dates","dir":"Articles","previous_headings":"Graphs","what":"Stacked bar charts with different start and end dates","title":"tstools","text":"even possible, produce stacked bar charts time series different start end dates. ### Grouped bar charts different variables got scale, aggregated want display time series bars next instead stacking . tstools stacking default can easily tweaked using *group_bar_chart parameter.","code":"tsb1 <- ts(runif(30, -30, 20), start = c(2010, 1), frequency = 4) tsb2 <- ts(runif(30, 0, 50), start = c(2010, 1), frequency = 4) tsb3 <- ts(runif(30, 0, 50), start = c(2010, 1), frequency = 4) tsb4 <- ts(runif(30, -40, 10), start = c(2005, 1), frequency = 4) tsplot(tsb1, tsb2, tsb3, tsb4,   left_as_bar = T,   auto_legend = F ) tsb1 <- ts(runif(20, -30, 20), start = c(2010, 1), frequency = 12) tsb2 <- ts(runif(20, 0, 50), start = c(2010, 1), frequency = 12) tsb3 <- ts(runif(20, 0, 50), start = c(2010, 1), frequency = 12) tsplot(tsb1, tsb2, tsb3,   left_as_bar = T,   group_bar_chart = T,   auto_legend = F )"},{"path":"/articles/tstools.html","id":"stacked-area-charts","dir":"Articles","previous_headings":"Graphs","what":"Stacked Area Charts","title":"tstools","text":"Stacked area charts another way stacking time series. might illustrative stacked bar charts, subject certain limitations: plots always start zero series need either positive negative.","code":"set.seed(123) tslist <- generate_random_ts(4,   starts = 1987:1990,   ranges_min = 1,   ranges_max = 3 ) tsplot(tslist, left_as_band = TRUE)"},{"path":"/articles/tstools.html","id":"multiple-y-axis-with-different-scales-line-charts","dir":"Articles","previous_headings":"Graphs","what":"Multiple Y-axis with different scales (line charts)","title":"tstools","text":"order compare indicators ’s covenient domains plot two time series completely different scale, e.g., growth rate indicator indexed 100, . Whenever absolute level overly interesting rather lead-lag structure co-movement, 2 y-axes different scales popular. Hence tsplot introduces second argument, tsr (time series right), takes either object class ts list time series.","code":"data(KOF) tsplot(KOF$kofbarometer,   tsr = KOF$reference, auto_legend = F )"},{"path":"/articles/tstools.html","id":"multiple-y-axes-with-different-scales-bar-and-line-charts","dir":"Articles","previous_headings":"Graphs","what":"Multiple Y-axes with different scales (bar and line charts)","title":"tstools","text":"Sometimes want bar chart one axis line chart . Guess , tstools also convenient way creating . Simply provide list time series … argument tsr argument choose left_as_bar = T. Note line chart automatically moved middle quarterly bar.","code":"tsb1 <- ts(runif(30, -30, 20), start = c(2010, 1), frequency = 4) tsb2 <- ts(runif(30, 0, 30), start = c(2010, 1), frequency = 4) tsb3 <- ts(runif(30, 0, 30), start = c(2010, 1), frequency = 4) tsr1 <- ts(runif(30, -4, 6), start = c(2010, 1), frequency = 4) tsplot(tsb1, tsb2, tsb3,   tsr = tsr1,   left_as_bar = T,   auto_legend = F )"},{"path":"/articles/tstools.html","id":"y-grids-automatic-vs--manual","dir":"Articles","previous_headings":"Graphs","what":"Y-Grids: automatic vs. manual","title":"tstools","text":"tstools tries guess reasonable number ticks (horizontal grids). can tricky several time series multiple axes involved. tstools’ standard procedure uses value ranges logarithm based algorithm find order magnitude scale. tstools brute forces number reasonable tick counts chooses suitable number ticks. case one y-axis choice passed axis.","code":""},{"path":"/articles/tstools.html","id":"using-another-function","dir":"Articles","previous_headings":"Graphs","what":"Using another function","title":"tstools","text":"However, countless possibilities number ticks grids may come matter personal taste. Hence, tstools provides flexibility set grids manually, can even pass another algorithm implemented R function gives back vector ticks. Simply pass function find_ticks_function argument. Currently range, potential tick count fixed arguments functions, hopefully passing sets arguments possible soon.","code":""},{"path":"/articles/tstools.html","id":"tweaking-the-defaults-themes","dir":"Articles","previous_headings":"Graphs","what":"Tweaking the defaults: Themes","title":"tstools","text":"Font size, line color, bar color, grid color, show show grid, plethora options lead ton parameters. specify , time consuming task create quick explorative plot. tstools suggests many defaults many parameters stores parameters lists called themes. tweak default, simply initialize default theme, tweak single list element pass entire theme tsplot. can also define properties multiple plots just passing new theme tsplot call. Please take look help file (?init_tsplot_theme) comprehensive list documenatation theme parameters. hand-picked examples give idea much can themes use ’em.","code":"def_theme <- init_tsplot_theme() names(def_theme) ##  [1] \"auto_bottom_margin\"        \"band_fill_color\"           ##  [3] \"bar_border\"                \"bar_border_lwd\"            ##  [5] \"bar_fill_color\"            \"bar_gap\"                   ##  [7] \"bar_group_gap\"             \"ci_alpha\"                  ##  [9] \"ci_colors\"                 \"ci_legend_label\"           ## [11] \"default_bottom_margin\"     \"fill_up_start\"             ## [13] \"fill_year_with_nas\"        \"highlight_color\"           ## [15] \"highlight_window\"          \"highlight_window_end\"      ## [17] \"highlight_window_freq\"     \"highlight_window_start\"    ## [19] \"highlight_y_values\"        \"highlight_y_lwd\"           ## [21] \"highlight_y_color\"         \"label_pos\"                 ## [23] \"legend_all_left\"           \"legend_box_size\"           ## [25] \"legend_col\"                \"legend_font_size\"          ## [27] \"legend_intersp_x\"          \"legend_intersp_y\"          ## [29] \"legend_margin_bottom\"      \"legend_margin_top\"         ## [31] \"legend_seg.len\"            \"line_colors\"               ## [33] \"line_to_middle\"            \"lty\"                       ## [35] \"lwd\"                       \"lwd_box\"                   ## [37] \"lwd_quarterly_ticks\"       \"lwd_x_axis\"                ## [39] \"lwd_y_axis\"                \"lwd_y_ticks\"               ## [41] \"lwd_yearly_ticks\"          \"margins\"                   ## [43] \"NA_continue_line\"          \"output_wide\"               ## [45] \"point_symbol\"              \"pointsize\"                 ## [47] \"preferred_y_gap_sizes\"     \"quarterly_ticks\"           ## [49] \"range_must_not_cross_zero\" \"show_left_y_axis\"          ## [51] \"show_points\"               \"show_right_y_axis\"         ## [53] \"show_x_axis\"               \"show_y_grids\"              ## [55] \"subtitle_adj\"              \"subtitle_adj_r\"            ## [57] \"subtitle_cex\"              \"subtitle_margin\"           ## [59] \"subtitle_outer\"            \"subtitle_transform\"        ## [61] \"sum_as_line\"               \"sum_legend\"                ## [63] \"sum_line_color\"            \"sum_line_lty\"              ## [65] \"sum_line_lwd\"              \"tcl_quarterly_ticks\"       ## [67] \"tcl_y_ticks\"               \"tcl_yearly_ticks\"          ## [69] \"title_adj\"                 \"title_cex.main\"            ## [71] \"title_margin\"              \"title_outer\"               ## [73] \"title_transform\"           \"total_bar_margin_pct\"      ## [75] \"use_bar_gap_in_groups\"     \"use_box\"                   ## [77] \"x_tick_dt\"                 \"xaxs\"                      ## [79] \"y_grid_color\"              \"y_grid_count\"              ## [81] \"y_grid_count_strict\"       \"y_las\"                     ## [83] \"y_range_min_size\"          \"y_tick_force_integers\"     ## [85] \"y_tick_margin\"             \"yaxs\"                      ## [87] \"yearly_ticks\""},{"path":"/articles/tstools.html","id":"highlight-windows-mark-a-period","dir":"Articles","previous_headings":"Graphs > Tweaking the defaults: Themes","what":"Highlight windows: mark a period","title":"tstools","text":"Let’s assume last 2 years time series forecast highlight shaded area behind actual series. know advance default parameter – case highlight_window = FALSE – want overwrite, recommend right calll init_tsplot_theme. cool thing : R Studio’s auto auggest helps find parameter. Pro tip: plan reuse theme another plot, specify parameter directly function call.","code":"tsplot(tsb1, tsb2, tsb3,   left_as_bar = T,   theme = init_tsplot_theme(highlight_window = T) )"},{"path":"/articles/tstools.html","id":"add-a-box-around-your-plot","dir":"Articles","previous_headings":"Graphs > Tweaking the defaults: Themes","what":"Add a Box Around Your Plot","title":"tstools","text":"","code":"tt <- init_tsplot_theme(use_box = T) tsplot(tsb1, tsb2, tsb3,   tsr = tsr1,   left_as_bar = T,   theme = tt )"},{"path":"/articles/tstools.html","id":"change-line-types","dir":"Articles","previous_headings":"Graphs > Tweaking the defaults: Themes","what":"Change line types…","title":"tstools","text":"Note can simply change existing themes","code":"tt$lty <- c(3, 2, 1) tsplot(tsb1, tsb2, tsb3,   theme = tt )"},{"path":"/articles/tstools.html","id":"adjust-the-highlight-window","dir":"Articles","previous_headings":"Graphs > Tweaking the defaults: Themes","what":"Adjust the highlight window","title":"tstools","text":"","code":"nt <- init_tsplot_theme(highlight_window = T) nt$highlight_window_start <- c(2017, 1) nt$highlight_window_end <- c(2018, 1) tsplot(tsb1, tsb2,   theme = nt )"},{"path":"/articles/tstools.html","id":"handling-missings-na-handling","dir":"Articles","previous_headings":"Graphs > Tweaking the defaults: Themes","what":"Handling missings (NA Handling)","title":"tstools","text":"","code":"tsplot(missings,   theme = init_tsplot_theme(     NA_continue_line = T,     show_points = T   ) )"},{"path":"/articles/tstools.html","id":"fill-up-year-with-nas","dir":"Articles","previous_headings":"Graphs > Tweaking the defaults: Themes","what":"Fill up Year With NAs","title":"tstools","text":"","code":"tsplot(ts2)"},{"path":"/articles/tstools.html","id":"fill-up-year-with-nas-1","dir":"Articles","previous_headings":"Graphs","what":"#Fill up Year With NAs","title":"tstools","text":"","code":"tsplot(ts2,   theme = init_tsplot_theme(fill_year_with_nas = F) )"},{"path":[]},{"path":"/articles/tstools.html","id":"assign-names-to-single-objects","dir":"Articles","previous_headings":"Graphs","what":"Assign Names to Single Objects","title":"tstools","text":"","code":"tsplot(   \"An arbitrary ts object\" = ts1,   \"another ts object\" = ts2 )"},{"path":"/articles/tstools.html","id":"legends-based-on-names-of-list-elements","dir":"Articles","previous_headings":"Graphs","what":"Legends Based on Names of List Elements","title":"tstools","text":"","code":"names(tslist) ## [1] \"ts1\" \"ts2\" \"ts3\" \"ts4\""},{"path":"/articles/tstools.html","id":"legends-based-on-names-of-list-elements-1","dir":"Articles","previous_headings":"Graphs","what":"Legends Based on Names of List Elements","title":"tstools","text":"","code":"tsplot(tslist)"},{"path":"/articles/tstools.html","id":"legends-multiple-columns","dir":"Articles","previous_headings":"Graphs","what":"Legends: multiple columns","title":"tstools","text":"","code":"tsplot(min_li,   theme = init_tsplot_theme(legend_col = 2) )"},{"path":"/articles/tstools.html","id":"legends-left-and-right-y-axis","dir":"Articles","previous_headings":"Graphs","what":"Legends Left and Right Y-Axis","title":"tstools","text":"","code":"tsplot(KOF[\"kofbarometer\"],   tsr = KOF[\"reference\"] )"},{"path":"/articles/tstools.html","id":"force-all-legends-to-the-left","dir":"Articles","previous_headings":"Graphs","what":"Force all Legends to the Left","title":"tstools","text":"","code":"tsplot(KOF[\"kofbarometer\"],   tsr = list(\"reference (right scale)\" = KOF$reference),   theme = init_tsplot_theme(legend_all_left = TRUE) )"},{"path":"/articles/tstools.html","id":"line-breaks-in-legends","dir":"Articles","previous_headings":"Graphs","what":"Line Breaks in Legends","title":"tstools","text":"","code":"tsplot(\"Some like\\n loooong legends\\n with so many words\" = ts1)"},{"path":"/articles/tstools.html","id":"remember-auto_legend-false","dir":"Articles","previous_headings":"Graphs","what":"Remember: auto_legend = FALSE","title":"tstools","text":"","code":"tsplot(KOF[1], auto_legend = F)"},{"path":"/articles/tstools.html","id":"export-your-chart-to--pdf","dir":"Articles","previous_headings":"","what":"Export your chart to .pdf","title":"tstools","text":"Saving tstools chart .pdf document easy convenient Notice optional print theme output_wide parameter: can export 4:3 (default) format .pdf files well 16:9 (wide) using convenience output_format theme parameter. Notice also necessarily use print theme. important wrap call pdf() dev.() calls using output_format=\"pdf\" option.","code":"tsplot(KOF[1],   output_format = \"pdf\",   theme = init_tsplot_print_theme(output_wide = T) )"},{"path":"/articles/tstools.html","id":"export-lists-of-time-series","dir":"Articles","previous_headings":"","what":"Export lists of time series","title":"tstools","text":"latest release tstools contains major overhaul export functionality. Exporting time series csv 400 times faster , thanks profiling sessions inclusion data.table (thanks Matt Dowle awesome package). may big achievement , export hundreds thousands millions time series like . Besides default .csv, .json, .xlsx, .RData available. .csv allows wide format transposed wide format output.","code":""},{"path":"/articles/tstools.html","id":"csv-long-format-default-wide-format-transposed-wide-format-","dir":"Articles","previous_headings":"Export lists of time series","what":"Csv: long format (default), wide format, transposed wide format.","title":"tstools","text":"transpose = T moves time header (x-axis) places variables rows . Transposing data good solution larger amount variables max 200-300 periods.","code":"data(KOF) write_ts(KOF, file.path(tempdir(), \"test_export\"), \"csv\") write_ts(KOF, file.path(tempdir(), \"test_export_wide_trans\"),   \"csv\",   wide = T,   transpose = T )"},{"path":[]},{"path":"/articles/tstools.html","id":"can-i-combine-tsplot-calls-with-ggplot-themes","dir":"Articles","previous_headings":"Frequenctly asked questions (FAQs)","what":"1. Can I combine tsplot calls with ggplot (themes)?","title":"tstools","text":", tsplot base R based. can simply add enhancements plot using base R calls. Add text, additional lines calling functions mtext(), abline() etc.","code":""},{"path":"/articles/tstools.html","id":"i-set-legend_col1-but-tsplot-seems-to-ignore-it--why-is-that","dir":"Articles","previous_headings":"Frequenctly asked questions (FAQs)","what":"2. I set legend_col=1 but tsplot seems to ignore it. Why is that?","title":"tstools","text":"’re probably using 2 Y-axes. default two Y-axes left aligned right aligned axis. allows leave additions like ‘(left scale)’, ‘(right scale)’. However, can simply force legends left.","code":"init_tsplot_theme(   legend_all_left = T,   legend_col = 1 )"},{"path":"/articles/tstools.html","id":"how-can-i-change-of-my-lines-bars-and-areas","dir":"Articles","previous_headings":"Frequenctly asked questions (FAQs)","what":"3. How can I change of my lines, bars and areas?","title":"tstools","text":"multiple pre-defined vectors different chart types. easy adjust. Also","code":"init_tsplot_theme(   band_fill_color = c(\"#FF0000\", \"#00FF00\"),   line_colors = c(\"#FF0000\", \"#00FF00\"),   bar_fill_color = c(\"#FF0000\", \"#00FF00\") )"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matthias Bannert. Author. Severin Thoeni. Author. Stéphane Bisinger. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bannert M, Thoeni S, Bisinger S (2023). tstools: Time Series Toolbox Official Statistics. R package version 0.4.3, https://github.com/KOF-ch/tstools.","code":"@Manual{,   title = {tstools: A Time Series Toolbox for Official Statistics},   author = {Matthias Bannert and Severin Thoeni and Stéphane Bisinger},   year = {2023},   note = {R package version 0.4.3},   url = {https://github.com/KOF-ch/tstools}, }"},{"path":"/index.html","id":"tstools--a-time-series-toolbox-for-official-statistics","dir":"","previous_headings":"","what":"A Time Series Toolbox for Official Statistics","title":"A Time Series Toolbox for Official Statistics","text":"Plot official statistics’ time series conveniently: automatic legends, highlight windows, stacked bar chars positive negative contributions, sum--line option, two y-axes automatic horizontal grids fit axes popular chart types. ‘tstools’ comes plethora defaults let plot without setting abundance parameters first, gives flexibility tweak defaults. addition charts, ‘tstools’ provides super fast, ‘data.table’ backed time series /O allows user export / import long format, wide format transposed wide format data various file types. -> pkgdown documentation <-","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Time Series Toolbox for Official Statistics","text":"can install development version tstools GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"kof-ch/tstools\")"},{"path":"/index.html","id":"example-use-time-series-charts-with-legends-by-default","dir":"","previous_headings":"","what":"Example Use: Time Series Charts with Legends by Default","title":"A Time Series Toolbox for Official Statistics","text":"{tstools} lets draw time series line charts come legend ---box. Simply feed tsplot() function list time series.  use easily use 2 y-axis. (know argue double axes fundamentally flawed, peers didn’t care asked .)","code":"library(tstools) ## basic example code tsl <- list(   AirPassengers = AirPassengers,   JohnsonJohnson = JohnsonJohnson )  tsplot(tsl) tsplot(   \"Air Passengers\" = tsl$AirPassengers,   tsr = list(\"Johnson & Johnson\" = tsl$JohnsonJohnson) )"},{"path":"/reference/CHGDP.html","id":null,"dir":"Reference","previous_headings":"","what":"CH GDP Growth Contributions — CHGDP","title":"CH GDP Growth Contributions — CHGDP","text":"list time series containing sector contributions Swiss GDP time.","code":""},{"path":"/reference/CHGDP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CH GDP Growth Contributions — CHGDP","text":"","code":"CHGDP"},{"path":"/reference/CHGDP.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CH GDP Growth Contributions — CHGDP","text":"List list six time series class ts, containing contributions Swiss GDP growth manufacturing Growth contribution manufacturing. energy Growth contribution energy, water sector construction Growth contribution construction sector. hotels Growth contribution hotels. fin_insur Growth contribution financial services insurances. Growth contribution sectors.","code":""},{"path":"/reference/CHGDP.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"CH GDP Growth Contributions — CHGDP","text":"https://www.seco.admin.ch/seco/en/home/wirtschaftslage---wirtschaftspolitik/Wirtschaftslage/bip-quartalsschaetzungen-/daten.html","code":""},{"path":"/reference/KOF.html","id":null,"dir":"Reference","previous_headings":"","what":"KOF Barometer - Swiss Business Cycle Indicator — KOF","title":"KOF Barometer - Swiss Business Cycle Indicator — KOF","text":"list time series containing two time series KOF Barometer growth Swiss GDP time. KOF Barometer monthly business cycle indicator computed KOF Swiss Economic Institute. GDP growth rate used reference series Barometer.","code":""},{"path":"/reference/KOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KOF Barometer - Swiss Business Cycle Indicator — KOF","text":"","code":"KOF"},{"path":"/reference/KOF.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"KOF Barometer - Swiss Business Cycle Indicator — KOF","text":"list two time series class ts kofbarometer KOF Barometer Indicator reference Reference series KOF Barometer, change Swiss GDP compared previous month baro_point_fc Auto Arima point forecast KOF Barometer baro_lo_80 Auto Arima 80 percent CI lower bound KOF Barometer forecast baro_hi_80 Auto Arima 80 percent CI upper bound KOF Barometer forecast baro_lo_95 Auto Arima 95 percent CI lower bound KOF Barometer forecast baro_hi_95 Auto Arima 95 percent CI upper bound KOF Barometer forecast","code":""},{"path":"/reference/KOF.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"KOF Barometer - Swiss Business Cycle Indicator — KOF","text":"https://kof.ethz.ch/en/forecasts--indicators/indicators/kof-economic-barometer.html","code":""},{"path":"/reference/color_blind.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide Colorblind Compliant Colors — color_blind","title":"Provide Colorblind Compliant Colors — color_blind","text":"8 Hex RGB color defintions suitable charts colorblind people.","code":""},{"path":"/reference/color_blind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide Colorblind Compliant Colors — color_blind","text":"","code":"color_blind()"},{"path":"/reference/compute_decimal_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Decimal Time from a ts Period Vector — compute_decimal_time","title":"Compute Decimal Time from a ts Period Vector — compute_decimal_time","text":"Standard ts object use vector length two store period. E.g. 2010,1 means first quarter 2010, series quarterly first month series monthly etc.","code":""},{"path":"/reference/compute_decimal_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Decimal Time from a ts Period Vector — compute_decimal_time","text":"","code":"compute_decimal_time(v, f)"},{"path":"/reference/compute_decimal_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Decimal Time from a ts Period Vector — compute_decimal_time","text":"v integer vector denoting point time f frequency","code":""},{"path":"/reference/concat_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate to Non-Overlapping Time Series — concat_ts","title":"Concatenate to Non-Overlapping Time Series — concat_ts","text":"Append one time series another. works non-overlapping time series frequency. overlapping time series please see resolveOverlap.","code":""},{"path":"/reference/concat_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate to Non-Overlapping Time Series — concat_ts","text":"","code":"concat_ts(ts1, ts2)"},{"path":"/reference/concat_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate to Non-Overlapping Time Series — concat_ts","text":"ts1 object class ts1, typically older two time series. ts2 object class ts1, typically younger two time series.","code":""},{"path":"/reference/create_cross_sec_overview.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Overview data.table of (last) observations — create_cross_sec_overview","title":"Create an Overview data.table of (last) observations — create_cross_sec_overview","text":"Create data.table shows -th obsersvation several time series.","code":""},{"path":"/reference/create_cross_sec_overview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Overview data.table of (last) observations — create_cross_sec_overview","text":"","code":"create_cross_sec_overview(list_of_rows, col_labels, tsl, selected_period)"},{"path":"/reference/create_cross_sec_overview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Overview data.table of (last) observations — create_cross_sec_overview","text":"list_of_rows list time series names col_labels character list column labels tsl list time series object select selected_period numeric date defining ts objects.","code":""},{"path":"/reference/create_cross_sec_overview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Overview data.table of (last) observations — create_cross_sec_overview","text":"","code":"tsl <- generate_random_ts(10, lengths = 20) list_of_rows <- list(   \"group 1\" = c(\"ts1\", \"ts2\", \"ts3\", \"ts4\"),   \"group 2\" = c(\"ts5\", \"ts6\", \"ts7\", \"ts10\") ) # These are no real +,=,- values just random data. create_cross_sec_overview(   list_of_rows,   c(\"+\", \"=\", \"-\", \"random\"),   tsl, c(1988, 12) ) #> Column 1 ['ts5'] of item 2 is missing in item 1. Use fill=TRUE to fill with NA (NULL for list columns), or use.names=FALSE to ignore column names. use.names='check' (default from v1.12.2) emits this message and proceeds as if use.names=FALSE for  backwards compatibility. See news item 5 in v1.12.2 for options to control this message. #>                    +           =          -    random #> 1: group 1 0.2276945 -0.04072107 -0.7852797 0.2388000 #> 2: group 2 0.9999312  0.12362805 -0.6986393 0.2755783"},{"path":"/reference/create_dummy_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Flexible Function to Create Time Series Dummy Variables — create_dummy_ts","title":"Flexible Function to Create Time Series Dummy Variables — create_dummy_ts","text":"Generate time series default value changed within certain subperiod. function allows additional convenience specifying single period dummies dummies go certain point time end series.","code":""},{"path":"/reference/create_dummy_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flexible Function to Create Time Series Dummy Variables — create_dummy_ts","text":"","code":"create_dummy_ts(   end_basic,   dummy_start,   dummy_end = NULL,   sp = T,   start_basic = c(1980, 1),   basic_value = 0,   dummy_value = 1,   frequency = 4 )"},{"path":"/reference/create_dummy_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flexible Function to Create Time Series Dummy Variables — create_dummy_ts","text":"end_basic numeric vector form c(yyyy,p) defining end time series. dummy_start numeric vector form c(yyyy,p) defining beginning period different value. dummy_end numeric vector form c(yyyy,p) defining end period different value. Defaults NULL, using end_date series. sp logical NULL value dummy_end lead single period dummy (TRUE) alternative values end. start_basic numeric vector form c(yyyy,p) defining start time series. Defaults c(1980,1) basic_value default value time series, defaults 0. dummy_value alternative value, defaults 1. frequency integer frequency regular time series, defaults 4 (quarterly).","code":""},{"path":"/reference/create_dummy_ts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Flexible Function to Create Time Series Dummy Variables — create_dummy_ts","text":"Matthias Bannert","code":""},{"path":"/reference/df_to_reg_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn data.frame to Regular Monthly or Quarterly Time Series — df_to_reg_ts","title":"Turn data.frame to Regular Monthly or Quarterly Time Series — df_to_reg_ts","text":"Turn data.frame date columns regular time series object possible. Design work quarterly monthly data.","code":""},{"path":"/reference/df_to_reg_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn data.frame to Regular Monthly or Quarterly Time Series — df_to_reg_ts","text":"","code":"df_to_reg_ts(   dframe,   var_cols,   year_col = \"year\",   period_col = \"month\",   freq = 12,   return_ts = T,   by = NULL )"},{"path":"/reference/df_to_reg_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn data.frame to Regular Monthly or Quarterly Time Series — df_to_reg_ts","text":"dframe data.frame input var_cols columns contain variables opposed date index. year_col integer, logical character vector indicating year position within data.frame. period_col integer, logical character vector indicating period position within data.frame. freq integer indicating frequency new time series. return_ts logical (list ) time series returned? Defaults TRUE. FALSE returns data.frame. character overwrite automatically detected (freq) parameter. e.g. '1 day'. Defaults NULL.","code":""},{"path":"/reference/df_to_reg_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn data.frame to Regular Monthly or Quarterly Time Series — df_to_reg_ts","text":"","code":"start_m <- as.Date(\"2017-01-01\") df_missing <- data.frame(   date = seq(start_m, by = \"2 months\", length = 6),   value = 1:6,   another_value = letters[1:6],   yet_another_col = letters[6:1] ) df_to_reg_ts(df_missing, c(\"value\", \"another_value\")) #> $value #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov #> 2017  1   NA  2   NA  3   NA  4   NA  5   NA  6  #>  #> $another_value #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov #> 2017  a   NA  b   NA  c   NA  d   NA  e   NA  f  #>  df_to_reg_ts(df_missing, c(\"value\", \"another_value\"), return_ts = FALSE) #>          date value another_value #> 1  2017-01-01     1             a #> 2  2017-02-01  <NA>          <NA> #> 3  2017-03-01     2             b #> 4  2017-04-01  <NA>          <NA> #> 5  2017-05-01     3             c #> 6  2017-06-01  <NA>          <NA> #> 7  2017-07-01     4             d #> 8  2017-08-01  <NA>          <NA> #> 9  2017-09-01     5             e #> 10 2017-10-01  <NA>          <NA> #> 11 2017-11-01     6             f"},{"path":"/reference/dot-read_swissdata_meta_unknown_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Meta Data File w/o File Extension — .read_swissdata_meta_unknown_format","title":"Read Meta Data File w/o File Extension — .read_swissdata_meta_unknown_format","text":"Read meta file without extension -> unknown format Tries determine format (yaml, json) return metadata path must point file without extension e.g. swissdata_wd/set_id/set_id","code":""},{"path":"/reference/dot-read_swissdata_meta_unknown_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Meta Data File w/o File Extension — .read_swissdata_meta_unknown_format","text":"","code":".read_swissdata_meta_unknown_format(path)"},{"path":"/reference/dot-read_swissdata_meta_unknown_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Meta Data File w/o File Extension — .read_swissdata_meta_unknown_format","text":"path character file path.","code":""},{"path":"/reference/dot-read_swissdata_meta_unknown_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Meta Data File w/o File Extension — .read_swissdata_meta_unknown_format","text":"Meta list file located, empty list otherwise","code":""},{"path":"/reference/fill_year_with_nas.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill Up a Time Series with NAs — fill_year_with_nas","title":"Fill Up a Time Series with NAs — fill_year_with_nas","text":"plotting time series might want set range plot little wider just start end date original series. function add fills current period (typically year) NA.","code":""},{"path":"/reference/fill_year_with_nas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill Up a Time Series with NAs — fill_year_with_nas","text":"","code":"fill_year_with_nas(x, add_periods = 1, fill_up_start = FALSE)"},{"path":"/reference/fill_year_with_nas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill Up a Time Series with NAs — fill_year_with_nas","text":"x object class ts add_periods integer periods add. fill_up_start logical start year filled ? Defaults FALSE.","code":""},{"path":"/reference/generate_random_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of random time series — generate_random_ts","title":"Generate a list of random time series — generate_random_ts","text":"Useful development generating easily reproducible examples","code":""},{"path":"/reference/generate_random_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of random time series — generate_random_ts","text":"","code":"generate_random_ts(   n = 1,   lengths = 36,   starts = 1988,   frequencies = 12,   ranges_min = -1,   ranges_max = 1,   shifts = 0,   ts_names = sprintf(\"ts%d\", 1:n),   seed = 30042018,   random_NAs = FALSE,   random_NA_proportions = 0.1,   normally_distributed = FALSE,   normal_means = 0,   normal_sds = 1,   frequency_shifts = FALSE,   frequency_shift_after = 0.5 )"},{"path":"/reference/generate_random_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a list of random time series — generate_random_ts","text":"n number ts objects generate lengths lengths time series starts start points time series single number notation (e.g. 1990.5) frequencies frequencies time series ranges_min minimum values time series (normally_distributed == FALSE) ranges_max maximum values time series (normally_distributed == FALSE) shifts shifts time series values per series ts_names names ts objects resulting list seed random seed used random_NAs Whether introcude NA values random positions ts random_NA_proportions fraction values replaced NAs random_NAs TRUE series normally_distributed Use normal distribution instead uniform normal_means means use normal distribution. Ignored unless normally_distributed set TRUE. normal_sds sds use normal distribution. Ignored unless normally_distributed set TRUE. frequency_shifts Introduce frequency shifts (4 12) ts frequency_shift_after fraction ts shift frequencies","code":""},{"path":"/reference/generate_random_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list of random time series — generate_random_ts","text":"list ts objects","code":""},{"path":"/reference/generate_random_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a list of random time series — generate_random_ts","text":"Except n ts_names, parameters accept either single value vector values. single value supplied, value used time series generated. vector supplied, values used corresponding series (e.g. starts[1] used first series, starts[2] second ). Vectors recycled n larger length. ts_names vector supplied, must length n must contain duplicates.","code":""},{"path":"/reference/generate_random_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a list of random time series — generate_random_ts","text":"","code":"generate_random_ts() #> $ts1 #>               Jan          Feb          Mar          Apr          May #> 1988  0.893485502 -0.688892365 -0.229749839 -0.922924874  0.124839254 #> 1989  0.967893334 -0.594695907  0.322527747  0.496914903  0.727370868 #> 1990  0.804336180 -0.842539105  0.546138290  0.177073403  0.396821795 #>               Jun          Jul          Aug          Sep          Oct #> 1988 -0.120733925 -0.624176192  0.020836985 -0.608169273 -0.298081449 #> 1989  0.758888437 -0.744613007  0.377339070 -0.925579273 -0.484392250 #> 1990  0.684014794  0.912440008 -0.040721069 -0.003143072  0.942819356 #>               Nov          Dec #> 1988 -0.189186306  0.227694534 #> 1989  0.989371605  0.172056411 #> 1990  0.666346054  0.357420872 #>   generate_random_ts(n = 3, ranges_min = c(-10, 0, 10), ranges_max = 20, starts = 2011) #> $ts1 #>             Jan        Feb        Mar        Apr        May        Jun #> 2011 18.4022825 -5.3333855  1.5537524 -8.8438731  6.8725888  3.1889911 #> 2012 19.5184000 -3.9204386  9.8379162 12.4537235 15.9105630 16.3833266 #> 2013 17.0650427 -7.6380866 13.1920743  7.6561010 10.9523269 15.2602219 #>             Jul        Aug        Sep        Oct        Nov        Dec #> 2011 -4.3626429  5.3125548 -4.1225391  0.5287783  2.1622054  8.4154180 #> 2012 -6.1691951 10.6600861 -8.8836891 -2.2658838 19.8405741  7.5808462 #> 2013 18.6866001  4.3891840  4.9528539 19.1422903 14.9951908 10.3613131 #>  #> $ts2 #>             Jan        Feb        Mar        Apr        May        Jun #> 2011  2.1075317 15.8001359  2.1949655 16.1399351  4.2801682 15.3437855 #> 2012  3.1571762  8.3932077  4.9065010  2.1472027 12.2637276 12.0804607 #> 2013  6.5450911  7.4986473  2.9009075  0.2139675  0.6966268  9.1141284 #>             Jul        Aug        Sep        Oct        Nov        Dec #> 2011 17.8379738 14.2003324  2.0477883 12.9515194  9.7699304 18.4422302 #> 2012 11.6444259 11.6545310  9.7440705 14.7366532 16.6135129  7.7045680 #> 2013 19.4714438 13.1005719 18.0990729 11.3003898 10.2154826 12.3880003 #>  #> $ts3 #>           Jan      Feb      Mar      Apr      May      Jun      Jul      Aug #> 2011 12.59638 19.75084 10.18752 17.32278 14.04742 12.70547 17.83230 18.62747 #> 2012 18.80858 17.06024 16.75530 17.97625 18.01916 14.56366 14.69751 19.99966 #> 2013 14.50377 16.79234 11.39901 15.97004 13.09541 18.14256 11.32945 17.80775 #>           Sep      Oct      Nov      Dec #> 2011 18.57995 18.76937 17.00687 16.84999 #> 2012 10.16592 12.06091 17.78977 19.72673 #> 2013 17.27397 18.92210 14.20673 10.67758 #>"},{"path":"/reference/getCiLegendColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to calculate ci colors for legends — getCiLegendColors","title":"Helper to calculate ci colors for legends — getCiLegendColors","text":"Helper calculate ci colors legends","code":""},{"path":"/reference/getCiLegendColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to calculate ci colors for legends — getCiLegendColors","text":"","code":"getCiLegendColors(color, n = 1, alpha = NULL)"},{"path":"/reference/getCiLegendColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to calculate ci colors for legends — getCiLegendColors","text":"color color ci band n number ci bands alpha alpha/transparency ci band","code":""},{"path":"/reference/getCiLegendColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to calculate ci colors for legends — getCiLegendColors","text":"vector non-transparent colors result oberlaying color pure white 1:n times","code":""},{"path":"/reference/getCiLegendColors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper to calculate ci colors for legends — getCiLegendColors","text":"Color may specified either named color hex value Transparency may specified hex value, number 0-255 number 0-1","code":""},{"path":"/reference/get_date_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Period Vector representation of a Decimal Time value — get_date_vector","title":"Compute the Period Vector representation of a Decimal Time value — get_date_vector","text":"period value rounded nearest integer. function vectorized single value can converted time.","code":""},{"path":"/reference/get_date_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Period Vector representation of a Decimal Time value — get_date_vector","text":"","code":"get_date_vector(dtime, frq)"},{"path":"/reference/get_date_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Period Vector representation of a Decimal Time value — get_date_vector","text":"dtime numeric decimal time value denoting point time frq integer frequency","code":""},{"path":"/reference/init_tsplot_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Initiate Default Theme — init_tsplot_theme","title":"Initiate Default Theme — init_tsplot_theme","text":"tsplot methods provide theme argument used pass plethora useful defaults. defaults essentially stored list. Sometimes user may want tweak defaults keeping . Hence init_tsplot_theme function create fresh list object containing default values lot different layout parameters etc. replacing single elements list passing entire list plot function, single aspects can tweaked keeping defaults. Init defaultTheme need parameters. function provides sensible defaults margins, font size, line width etc. scaled dimensions output file.","code":""},{"path":"/reference/init_tsplot_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initiate Default Theme — init_tsplot_theme","text":"","code":"init_tsplot_theme(   auto_bottom_margin = FALSE,   band_fill_color = c(ETH8 = \"#007A92\", ETH8_60 = \"#66b0c2\", ETH8_30 = \"#b3d7e0\", ETH8_20     = \"#cce5eb\", ETH5 = \"#91056a\", ETH5_60 = \"#cc67a7\", ETH5_30 = \"#e6b3d3\"),   bar_border = \"#000000\",   bar_border_lwd = 1,   bar_fill_color = c(ETH8 = \"#007A92\", ETH8_60 = \"#66b0c2\", ETH8_30 = \"#b3d7e0\", ETH8_20     = \"#cce5eb\", ETH5 = \"#91056a\", ETH5_60 = \"#cc67a7\", ETH5_30 = \"#e6b3d3\"),   bar_gap = 15,   bar_group_gap = 30,   ci_alpha = \"44\",   ci_colors = line_colors,   ci_legend_label = \"%ci_value%% ci for %series%\",   default_bottom_margin = 15,   fill_up_start = FALSE,   fill_year_with_nas = TRUE,   highlight_color = \"#e9e9e9\",   highlight_window = FALSE,   highlight_window_end = NA,   highlight_window_freq = 4,   highlight_window_start = NA,   highlight_y_values = NA,   highlight_y_lwd = 2,   highlight_y_color = \"#000000\",   label_pos = \"mid\",   legend_all_left = FALSE,   legend_box_size = 2,   legend_col = 1,   legend_font_size = 1,   legend_intersp_x = 1,   legend_intersp_y = 1,   legend_margin_bottom = 5,   legend_margin_top = 12,   legend_seg.len = 2,   line_colors = c(ETH_8_100 = \"#a9af66\", ETH_4_100 = \"#72791c\", ETH_8_20 = \"#cce5eb\",     ETH_5_60 = \"#cc67a7\", ETH_8_60 = \"#66b0c2\", ETH_5_100 = \"#91056a\", ETH_4_60 =     \"#007a92\"),   line_to_middle = TRUE,   lty = 1,   lwd = c(2, 3, 1, 4, 2, 4),   lwd_box = 1.5,   lwd_quarterly_ticks = 1,   lwd_x_axis = 1.5,   lwd_y_axis = 1.5,   lwd_y_ticks = 1.5,   lwd_yearly_ticks = 1.5,   margins = c(NA, 7, 12, 7),   NA_continue_line = FALSE,   output_wide = FALSE,   point_symbol = 1:18,   pointsize = 12,   preferred_y_gap_sizes = c(25, 20, 15, 10, 5, 2.5, 1, 0.5),   quarterly_ticks = TRUE,   range_must_not_cross_zero = TRUE,   show_left_y_axis = TRUE,   show_points = FALSE,   show_right_y_axis = TRUE,   show_x_axis = TRUE,   show_y_grids = TRUE,   subtitle_adj = 0,   subtitle_adj_r = 0.9,   subtitle_cex = 1,   subtitle_margin = 2,   subtitle_outer = FALSE,   subtitle_transform = \"toupper\",   sum_as_line = FALSE,   sum_legend = \"sum\",   sum_line_color = c(ETH_8_100 = \"#007a92\"),   sum_line_lty = 1,   sum_line_lwd = 3,   tcl_quarterly_ticks = -0.4,   tcl_y_ticks = -0.75,   tcl_yearly_ticks = -0.75,   title_adj = 0,   title_cex.main = 1,   title_margin = 5,   title_outer = FALSE,   title_transform = NA,   total_bar_margin_pct = 0.2,   use_bar_gap_in_groups = FALSE,   use_box = FALSE,   x_tick_dt = 1,   xaxs = \"i\",   y_grid_color = \"#CCCCCC\",   y_grid_count = c(5, 6, 8, 10),   y_grid_count_strict = FALSE,   y_las = 2,   y_range_min_size = NULL,   y_tick_force_integers = FALSE,   y_tick_margin = 0.15,   yaxs = \"i\",   yearly_ticks = TRUE )  init_tsplot_print_theme(   output_wide = FALSE,   margins = c(NA, 10/if (output_wide) 1 + 1/3 else 1, 10, 7/if (output_wide) 1 + 1/3 else     1),   lwd = scale_theme_param_for_print(c(2, 3, 1, 4, 2, 4), if (output_wide) c(10 + 2/3, 6)     else c(8, 6)),   sum_line_lwd = scale_theme_param_for_print(3, if (output_wide) c(10 + 2/3, 6) else c(8,     6)),   lwd_box = scale_theme_param_for_print(1.5, if (output_wide) c(10 + 2/3, 6) else c(8,     6)),   lwd_x_axis = scale_theme_param_for_print(1.5, if (output_wide) c(10 + 2/3, 6) else c(8,     6)),   lwd_yearly_ticks = scale_theme_param_for_print(1.5, if (output_wide) c(10 + 2/3, 6)     else c(8, 6)),   lwd_quarterly_ticks = scale_theme_param_for_print(1, if (output_wide) c(10 + 2/3, 6)     else c(8, 6)),   lwd_y_axis = scale_theme_param_for_print(1.5, if (output_wide) c(10 + 2/3, 6) else c(8,     6)),   lwd_y_ticks = scale_theme_param_for_print(1.5, if (output_wide) c(10 + 2/3, 6) else     c(8, 6)),   legend_intersp_y = scale_theme_param_for_print(1, if (output_wide) c(10 + 2/3, 6) else     c(8, 6)),   legend_box_size = scale_theme_param_for_print(2, if (output_wide) c(10 + 2/3, 6) else     c(8, 6)),   legend_margin_top = 8,   legend_margin_bottom = 3,   legend_seg.len = scale_theme_param_for_print(2, if (output_wide) c(10 + 2/3, 6) else     c(8, 6)),   pointsize = scale_theme_param_for_print(12, if (output_wide) c(10 + 2/3, 6) else c(8,     6)),   ... )"},{"path":"/reference/init_tsplot_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initiate Default Theme — init_tsplot_theme","text":"auto_bottom_margin logical bottom margin automatically calculated? overridden margins[1] NA. Default FALSE band_fill_color character vector hex colors bands left_as_band == TRUE. bar_border character hex colors border around bars bar charts. bar_border_lwd numeric line width borders bars barplots. Default 1 bar_fill_color character vector hex colors bars left_as_bar == TRUE bar_gap numeric width gap bars, % space alloted bar. bar_group_gap numeric width gap groups bars group_bar_chart TRUE. ci_alpha Numeric 0-255, numeric 0-1 hey 00-FF, transparency confidence interval bands ci_colors Named colors hex values Colors confidence interval bands ci_legend_label character formatting template ci bands labelled. May contain placeholders. '%ci_value%' replaced ci label. '%series%' (replaced series name) exactly . Defaults '%ci_value% ci %series%' default_bottom_margin numeric bottom margin use margins[1] NA neither auto_legend auto_bottom_margin true. Default 3 fill_up_start logical shoule start year also filled? effect fill_year_with_nas == FALSE. Default FALSE fill_year_with_nas logical year filled missing order plot entire year axis. Defaults TRUE, highlight_color character hex color code highlight background, defaults \"#e9e9e9\". highlight_window logical particular time span highlighted different background color. Defaults FALSE. highlight_window_end integer vector highlight window start position, defaults NA., highlight_window_freq integer frequency higlight window defintion, defaults 4. highlight_window_start integer vector highlight window start position, defaults NA. highlight_y_values numeric Vector y values highlight bold line highlight_y_lwd integer Line width lines highlight y values highlight_y_color character Color lines highlight y values label_pos character, denotes x-axis label . defaults \"mid\", alternative value: \"start\". legend_all_left logical legend entries drawn left side plot? Default FALSE legend_box_size numeric size squares denoting bar colors legend. Default 2 legend_col integer number columns legend, defaults 3. legend_font_size numeric passed cex parameter legend, defaults 1 legend_intersp_x numeric base legend parameter, defaults 1 legend_intersp_y numeric base legend parameter, defaults 1 legend_margin_bottom numeric Distance bottom legend bottom graphic % device height, default 5 legend_margin_top numeric Distance bottom plot top legends % device height, defaults 12 legend_seg.len numeric Length line segments legend. Default 2 line_colors character vector hex colors 6 lines. line_to_middle logical try put line middle plot. defaults TRUE. lty integer vector line type defaults 1. lwd integer vector line width, defaults c(2,3,1,4,2,4). lwd_box numeric Line width box around plot. Default 1.5 lwd_quarterly_ticks numeric, width yearly ticks, defaults 1. lwd_x_axis numeric line width x axis. Default 1.5 lwd_y_axis numeric line width y axis. Default 1.5 lwd_y_ticks numeric Line width y ticks. Default 1.5 lwd_yearly_ticks numeric, width yearly ticks, defaults 1.5. margins integer vector defaults c(NA, 4, 3, 3) + 0.1. Set margins[1] NA automatically determine bottom margin legend fits (either auto_legend auto_bottom_margin TRUE) NA_continue_line boolean true, NA values time series ignored contonuous line drawn. Multiple values turn behavior /indivitual series supported. Default FALSE output_wide logical output file wide format (16:9) (4:3)? output_format \"plot\". Default FALSE point_symbol integer character symbol use marking data points. Multiple values can supplied set symbol individual series See pch ?par. Default 1:18 pointsize Numeric Point size text, 1/72 inch preferred_y_gap_sizes numeric c(25, 20, 15, 10, 5, 2.5, 1, 0.5), quarterly_ticks logical, quarterly ticks shown. Defaults TRUE. range_must_not_cross_zero logical automatic range finders forced find ranges zero. Defaults TRUE. show_left_y_axis logical: left y axis shown, defaults TRUE. show_points boolean Whether draw symbol specified point_symbol data points. Multiple values can supplied enable/disable showing points individual series Default FALSE show_right_y_axis logical: left y axis shown, defaults TRUE. show_x_axis locigal: x axis shown, defaults TRUE show_y_grids logical y_grids shown , defaults TRUE. subtitle_adj numeric base plot parameter, defaults 0. subtitle_adj_r numeric base plot parameter, defaults .9 subtitle_cex numeric base plot parameter, defaults 1. subtitle_margin numeric far plot title placed % device height. Defaults 2. subtitle_outer logical base plot parameter, defaults TRUE subtitle_transform function transform subtitle, defaults \"toupper\", sum_as_line logical sum stacked time series displayed line top stacked bar charts. Defaults FALSE, sum_legend character Label sum line, defaults \"sum\". Set NULL label line . sum_line_color character hex color sum_as_line, defaults \"#91056a\". sum_line_lty integer line type sum_as_line, defaults 1. sum_line_lwd integer line width sum_as_line, defaults 3. tcl_quarterly_ticks numeric, length quarterly ticks. See tcl_yearly_ticks, defaults -0.4 tcl_y_ticks numeric Length y ticks, see tcl_yearly_ticks. Default -0.75 tcl_yearly_ticks numeric, length yearly ticks. Analogous cex axis. defaults -0.75. title_adj numeric, base plot parameter, defaults 0. title_cex.main numeric, base plot parameter defaults 1 title_margin numeric far plot title placed % device height. Default 8 title_outer logical, currently undocumented. Defaults TRUE. title_transform function transform title, defaults NA. total_bar_margin_pct numeric defintion base plot, defaults \"\", defaults .2, use_bar_gap_in_groups logical gaps size bar_gap bars group group_bar_chart = TRUE? Default FALSE use_box logical use box around plot. x_tick_dt numeric distance ticks x axis years. first tick always start plotted time series. Defaults 1. xaxs character axis defintion base plot, defaults \"\". y_grid_color character hex color grids. Defaults gray \"#CCCCCC\". y_grid_count integer vector preferred y grid counts c(5,6,8,10). y_grid_count_strict logical strictly stick preferred y grid count? Defaults FALSE. y_las integer, base plot parameter defaults 2. y_range_min_size = NULL  , y_tick_force_integers logical y ticks forced (rounded ) whole numbers? Default FALSE y_tick_margin numeric, minimal percentage horizontal grid needs clean, .e., without lines bars. Defaults 0.15 (15 percent). yaxs character axis defintion base plot, defaults \"\". yearly_ticks logical, yearly ticks shown. Defaults TRUE. ... arguments init_tsplot_thene","code":""},{"path":"/reference/init_tsplot_theme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initiate Default Theme — init_tsplot_theme","text":"Themes essentially list contain par parameters. items listed, comments. per-line parameters (line_colors, lwd, lty, show_points, point_symbol) recycled time series elements corresponding theme vectors supplied. e.g. four time series plotted two line_colors supplied, first third series first color, second fourth series second color. list contains following elements:","code":""},{"path":"/reference/init_tsplot_theme.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Initiate Default Theme — init_tsplot_theme","text":"Matthias Bannert","code":""},{"path":"/reference/init_tsplot_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initiate Default Theme — init_tsplot_theme","text":"","code":"if (FALSE) { # create a list data(KOF) tt <- init_tsplot_theme() # adjust a single element tt$highlight_window <- TRUE # pass the list to tsplot tsplot(KOF$kofbarometer, theme = tt) # for more theme examples check the vignette vignette(\"tstools\") }"},{"path":"/reference/long_to_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a long format data.frame of time series to a tslist — long_to_ts","title":"Transform a long format data.frame of time series to a tslist — long_to_ts","text":"data.frame must three columns \"date\", \"value\" \"series\" (identifying time series)","code":""},{"path":"/reference/long_to_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a long format data.frame of time series to a tslist — long_to_ts","text":"","code":"long_to_ts(   data,   keep_last_freq_only = FALSE,   force_xts = FALSE,   strip_nas = TRUE )"},{"path":"/reference/long_to_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a long format data.frame of time series to a tslist — long_to_ts","text":"data data.frame data.frame transformed keep_last_freq_only case frequency change time series, part series returned frequency last observation. useful data start crappy stabilize force_xts logical strip_nas logical NAs stripped (leading trailing nas) ?","code":""},{"path":"/reference/m_to_q.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn monthly series with regular NAs to quarter — m_to_q","title":"Turn monthly series with regular NAs to quarter — m_to_q","text":"Monthly series NAs non-quarter months turned quarterly series. Series without NAs just returned.","code":""},{"path":"/reference/m_to_q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn monthly series with regular NAs to quarter — m_to_q","text":"","code":"m_to_q(series)"},{"path":"/reference/m_to_q.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn monthly series with regular NAs to quarter — m_to_q","text":"series object class ts monthly frequency","code":""},{"path":"/reference/overlap_sorted_ts_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Concat Time Series list wise — overlap_sorted_ts_lists","title":"Concat Time Series list wise — overlap_sorted_ts_lists","text":"Concat overlapping time series list wise. List needs length. Takes names list B.","code":""},{"path":"/reference/overlap_sorted_ts_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concat Time Series list wise — overlap_sorted_ts_lists","text":"","code":"overlap_sorted_ts_lists(listA, listB)"},{"path":"/reference/overlap_sorted_ts_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concat Time Series list wise — overlap_sorted_ts_lists","text":"listA list time series listB list time series","code":""},{"path":"/reference/overlap_ts_lists_by_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve Overlap Listwise, helpful with SA — overlap_ts_lists_by_name","title":"Resolve Overlap Listwise, helpful with SA — overlap_ts_lists_by_name","text":"Resolve Overlap Listwise, helpful SA","code":""},{"path":"/reference/overlap_ts_lists_by_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve Overlap Listwise, helpful with SA — overlap_ts_lists_by_name","text":"","code":"overlap_ts_lists_by_name(listA, listB, chunkA = \"_f4\", chunkB = \"_f12\")"},{"path":"/reference/overlap_ts_lists_by_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve Overlap Listwise, helpful with SA — overlap_ts_lists_by_name","text":"listA list time series often lower frequency listB list time series often higher frequency chunkA character chunk representing frequencies, defaults _f4. chunkB character chunk representing frequences, defaults _f12.","code":""},{"path":"/reference/read_swissdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data generated by the Swissdata project — read_swissdata","title":"Read data generated by the Swissdata project — read_swissdata","text":"Read data swissdata compliant .csv files turn list time series.","code":""},{"path":"/reference/read_swissdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data generated by the Swissdata project — read_swissdata","text":"","code":"read_swissdata(   path,   key_columns = NULL,   filter = NULL,   aggregates = NULL,   keep_last_freq_only = FALSE )"},{"path":"/reference/read_swissdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data generated by the Swissdata project — read_swissdata","text":"path character full path dataset. key_columns character vector specifying columns part key. Defaults dim.order specified swissdata. filter function function applied raw data.data table read. Useful filtering undesired data. aggregates list list dimensions aggregate data. names list determing function used calculate aggregate (e.g. sum, mean etc.). Defaults sum. keep_last_freq_only case frequency change time series, part series returned frequency last observation. useful data start crappy stabilize","code":""},{"path":"/reference/read_swissdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read data generated by the Swissdata project — read_swissdata","text":"order dimensions key_columns determines order key resulting ts_key form <swissdata-set-name>.<instance key_columns[1]>...","code":""},{"path":"/reference/read_swissdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data generated by the Swissdata project — read_swissdata","text":"","code":"ds_location <- system.file(\"example_data/ch.seco.css.csv\", package = \"tstools\") tslist <- read_swissdata(ds_location, \"idx_type\") tsplot(tslist[1])"},{"path":"/reference/read_swissdata_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Read swissdata style yaml timeseries metadata — read_swissdata_meta","title":"Read swissdata style yaml timeseries metadata — read_swissdata_meta","text":"read_swissdata_meta reads given .yaml file converts per-timeseries format.","code":""},{"path":"/reference/read_swissdata_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read swissdata style yaml timeseries metadata — read_swissdata_meta","text":"","code":"read_swissdata_meta(path, locale = \"de\", as_list = FALSE)"},{"path":"/reference/read_swissdata_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read swissdata style yaml timeseries metadata — read_swissdata_meta","text":"path Path yaml file read locale Locale read data (supported \"de\", \"fr\", \"\" \"en\") as_list output converted list?","code":""},{"path":"/reference/read_swissdata_meta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read swissdata style yaml timeseries metadata — read_swissdata_meta","text":"as_list set TRUE, function returns nested list one element per timeseries, otherwise data.table one row per series.","code":""},{"path":"/reference/read_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Import time series data from a file. — read_ts","title":"Import time series data from a file. — read_ts","text":"importing zip file, archive contain single file extension .csv, .xlsx .json.","code":""},{"path":"/reference/read_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import time series data from a file. — read_ts","text":"","code":"read_ts(   file,   format = c(\"csv\", \"xlsx\", \"json\", \"zip\"),   sep = \",\",   skip = 0,   column_names = c(\"date\", \"value\", \"series\"),   keep_last_freq_only = FALSE,   force_xts = FALSE )"},{"path":"/reference/read_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import time series data from a file. — read_ts","text":"file Path file read format file format data stored ? format supplied, read_ts attempt guess file extension. sep character seperator csv files. defaults ','. skip numeric See data.table's fread. column_names character vector denoting column names, defaults c(\"date\",\"value\",\"series). keep_last_freq_only case frequency change time series, part series returned frequency last observation. useful data start crappy stabilize . Defaults FALSE. Hence last part series returned. force_xts set true, time series returned xts objects regargless regularity. Setting TRUE means keep_last_freq_only ignored.","code":""},{"path":"/reference/read_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import time series data from a file. — read_ts","text":"named list ts objects","code":""},{"path":"/reference/regularize.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn an Irregular Time Series to a Regular, ts-Based Series — regularize","title":"Turn an Irregular Time Series to a Regular, ts-Based Series — regularize","text":"Adds missing values turn irregular time series regular one. function currently experimental. works target frequencies 1,2,4,12.","code":""},{"path":"/reference/regularize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn an Irregular Time Series to a Regular, ts-Based Series — regularize","text":"","code":"regularize(x)"},{"path":"/reference/regularize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn an Irregular Time Series to a Regular, ts-Based Series — regularize","text":"x irregular time series object class zoo xts.","code":""},{"path":"/reference/regularize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn an Irregular Time Series to a Regular, ts-Based Series — regularize","text":"","code":"ts1 <- rnorm(5) dv <- c(   seq(as.Date(\"2010-01-01\"), length = 3, by = \"3 years\"),   seq(as.Date(\"2018-01-01\"), length = 2, by = \"2 years\") ) library(zoo) xx <- zoo(ts1, dv) regularize(xx) #> Time Series: #> Start = 2010  #> End = 2020  #> Frequency = 1  #>  [1]  1.6700886         NA         NA -1.6875603         NA         NA #>  [7]  0.4565716         NA  0.2188939         NA  2.4533042  dv2 <- c(seq(as.Date(\"2010-01-01\"), length = 20, by = \"1 months\")) dv2 <- dv2[c(1:10, 14:20)] xx2 <- zoo(rnorm(length(dv2)), dv2) regularize(xx2) #>             Jan        Feb        Mar        Apr        May        Jun #> 2010 -0.9580244  1.3530311  1.2738529  0.1868429  0.2705550  0.3431659 #> 2011         NA -0.7662984 -0.4223377 -1.7581646  0.7256151 -1.9287957 #>             Jul        Aug        Sep        Oct        Nov        Dec #> 2010 -1.6331552 -0.5648019 -2.0137132 -0.8579509         NA         NA #> 2011  0.8934381  0.2672875"},{"path":"/reference/resolve_ts_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate Time Series and Resolve Overlap Automatically — resolve_ts_overlap","title":"Concatenate Time Series and Resolve Overlap Automatically — resolve_ts_overlap","text":"Append time series . Resolve overlap determines  two ts class time series reaching arranges two series first second series accordingly. time series concatenated one series frequency. Typically function used concatenate two series certain overlap, one series clearly starts earlier lasts longer. one series starts earlier stops later, elements shorter series inserted larger series, .e. elements smaller series replace elements longer series. Usually ts2 kept.","code":""},{"path":"/reference/resolve_ts_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate Time Series and Resolve Overlap Automatically — resolve_ts_overlap","text":"","code":"resolve_ts_overlap(ts1, ts2, keep_ts2 = T, tolerance = 0.001)"},{"path":"/reference/resolve_ts_overlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate Time Series and Resolve Overlap Automatically — resolve_ts_overlap","text":"ts1 ts time series, typically older series ts2 ts time series, typically younger series keep_ts2 logical ts2 kept? Defaults TRUE. tolerance numeric comparing min max values index vector time series R runs trouble precision handling, thus tolerance needs set. Typically need adjusted. E.g. 2010 != 2010.000. help tolerance parameter two equal.","code":""},{"path":"/reference/resolve_ts_overlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate Time Series and Resolve Overlap Automatically — resolve_ts_overlap","text":"","code":"ts1 <- ts(rnorm(100), start = c(1990, 1), frequency = 4) ts2 <- ts(1:18, start = c(2000, 1), frequency = 4) resolve_ts_overlap(ts1, ts2) #>             Qtr1        Qtr2        Qtr3        Qtr4 #> 1990  1.07499582 -0.56290995  0.47332312 -1.13058978 #> 1991 -0.13733236  0.08488305  0.25708364  0.86766986 #> 1992 -0.38971857 -0.29849332 -1.39490259 -1.86814621 #> 1993  2.10751916 -1.53210279  0.73222547 -0.19092268 #> 1994  1.25827781 -0.84690600  2.54992321 -0.26758671 #> 1995  0.06122782 -1.20684023  0.39584202 -0.01311066 #> 1996 -0.48042500 -0.72661184  0.21488446  3.15126199 #> 1997  0.22096008  0.48148591 -0.23079310 -0.37785992 #> 1998 -0.31281147 -1.55296866  1.37852550 -0.72345741 #> 1999  0.87811608 -0.86148197 -0.09795389 -0.33224813 #> 2000  1.00000000  2.00000000  3.00000000  4.00000000 #> 2001  5.00000000  6.00000000  7.00000000  8.00000000 #> 2002  9.00000000 10.00000000 11.00000000 12.00000000 #> 2003 13.00000000 14.00000000 15.00000000 16.00000000 #> 2004 17.00000000 18.00000000  2.21641754  0.12863304 #> 2005  0.35711592  1.52103064 -0.73402025 -0.99077254 #> 2006  0.31407530  1.12806931  0.90894625  1.51542445 #> 2007 -2.24889172 -0.52226441  1.20416093 -1.02365916 #> 2008  2.06949160 -0.04434057 -0.63362897 -0.33998993 #> 2009  0.15964475  0.96339472 -0.46080936  1.38096741 #> 2010 -0.19914854 -1.61168433  1.39064189 -2.28407090 #> 2011  1.64638428  1.07493732 -0.35441575  2.18454362 #> 2012  0.04432351 -0.63436366  0.64567639  0.60339269 #> 2013  0.30021773  0.42698292  0.01617907  0.63636970 #> 2014 -0.67644185  0.53087576 -0.84549742 -0.68165114  # automatical detection of correction sequence! ts1 <- ts(rnorm(90), start = c(1990, 1), frequency = 4) ts2 <- ts(1:60, start = c(2000, 1), frequency = 4) resolve_ts_overlap(ts1, ts2) #>             Qtr1        Qtr2        Qtr3        Qtr4 #> 1990  0.23715806 -0.36271823 -0.13964926  0.76096814 #> 1991 -0.37169021 -1.91417388  1.39588121  0.06797950 #> 1992  1.31606491 -2.59226016  0.69476329 -1.04401681 #> 1993 -0.13623151 -1.13112968  0.73484829  0.66166584 #> 1994 -1.09846253  0.50327294 -0.35065686 -0.30109697 #> 1995 -0.26623575 -1.29049713  0.03958001 -0.48245272 #> 1996 -0.66890939  1.13854216  0.19503770  0.39482715 #> 1997  0.19961277 -2.11065490  1.47803534 -1.27944778 #> 1998  0.18099566  0.86626534  0.61436684  1.10108159 #> 1999 -0.37106953  1.17084593  0.28372441 -0.12422234 #> 2000  1.00000000  2.00000000  3.00000000  4.00000000 #> 2001  5.00000000  6.00000000  7.00000000  8.00000000 #> 2002  9.00000000 10.00000000 11.00000000 12.00000000 #> 2003 13.00000000 14.00000000 15.00000000 16.00000000 #> 2004 17.00000000 18.00000000 19.00000000 20.00000000 #> 2005 21.00000000 22.00000000 23.00000000 24.00000000 #> 2006 25.00000000 26.00000000 27.00000000 28.00000000 #> 2007 29.00000000 30.00000000 31.00000000 32.00000000 #> 2008 33.00000000 34.00000000 35.00000000 36.00000000 #> 2009 37.00000000 38.00000000 39.00000000 40.00000000 #> 2010 41.00000000 42.00000000 43.00000000 44.00000000 #> 2011 45.00000000 46.00000000 47.00000000 48.00000000 #> 2012 49.00000000 50.00000000 51.00000000 52.00000000 #> 2013 53.00000000 54.00000000 55.00000000 56.00000000 #> 2014 57.00000000 58.00000000 59.00000000 60.00000000  # both series are of the same length use sequence of arguments. ts1 <- ts(rnorm(100), start = c(1990, 1), frequency = 4) ts2 <- ts(1:48, start = c(2003, 1), frequency = 4) resolve_ts_overlap(ts1, ts2) #>              Qtr1         Qtr2         Qtr3         Qtr4 #> 1990  0.448161982  1.080627129  0.710088195  1.052108208 #> 1991  0.969099141 -0.612065164 -0.388277237 -0.220564717 #> 1992  1.081428848 -0.247436991 -1.170782447  0.905195112 #> 1993  0.302591414 -0.572939736 -0.098992242 -2.307641112 #> 1994  0.838894994  1.327500612 -0.412948518  0.538962656 #> 1995  1.137273292 -0.006175048 -0.413406675 -1.244555744 #> 1996 -0.189813461 -0.232158812 -0.851538410  0.014622186 #> 1997  0.185678373  1.641547999  0.031051717  0.666718862 #> 1998  2.199621717  2.025922335 -2.058201368  1.429970731 #> 1999  0.344010785  0.358509203  0.038469268 -0.619369399 #> 2000  0.568921164 -1.140901758 -0.080893461 -0.676020061 #> 2001  1.079421091 -0.275567441 -1.337584230  1.440831422 #> 2002 -0.428264028 -0.917613468  1.883843707  0.307011283 #> 2003  1.000000000  2.000000000  3.000000000  4.000000000 #> 2004  5.000000000  6.000000000  7.000000000  8.000000000 #> 2005  9.000000000 10.000000000 11.000000000 12.000000000 #> 2006 13.000000000 14.000000000 15.000000000 16.000000000 #> 2007 17.000000000 18.000000000 19.000000000 20.000000000 #> 2008 21.000000000 22.000000000 23.000000000 24.000000000 #> 2009 25.000000000 26.000000000 27.000000000 28.000000000 #> 2010 29.000000000 30.000000000 31.000000000 32.000000000 #> 2011 33.000000000 34.000000000 35.000000000 36.000000000 #> 2012 37.000000000 38.000000000 39.000000000 40.000000000 #> 2013 41.000000000 42.000000000 43.000000000 44.000000000 #> 2014 45.000000000 46.000000000 47.000000000 48.000000000 ts1 <- ts(rnorm(101), start = c(1990, 1), frequency = 4) ts2 <- ts(1:61, start = c(2000, 1), frequency = 4) resolve_ts_overlap(ts1, ts2) #>             Qtr1        Qtr2        Qtr3        Qtr4 #> 1990 -0.18129372 -1.32719748 -0.54565438  0.93310559 #> 1991  3.17553109 -0.06793149  0.09544166  0.26998457 #> 1992  0.99632482  0.74559793  0.59883125 -1.12278819 #> 1993 -0.44346396  0.96042299  0.82366842  0.10853195 #> 1994 -1.02132913  1.05567610  1.13204407  2.26413266 #> 1995 -1.66185419 -1.37590559  0.69176861  1.50343817 #> 1996  0.74105731  1.49445860 -0.06440401 -0.77839368 #> 1997  0.24260579 -0.51037225  0.76219346  1.73675137 #> 1998  0.50278433 -0.11788021 -0.24069547  0.82245862 #> 1999 -2.09134021 -0.46645726 -0.18637962 -0.11101719 #> 2000  1.00000000  2.00000000  3.00000000  4.00000000 #> 2001  5.00000000  6.00000000  7.00000000  8.00000000 #> 2002  9.00000000 10.00000000 11.00000000 12.00000000 #> 2003 13.00000000 14.00000000 15.00000000 16.00000000 #> 2004 17.00000000 18.00000000 19.00000000 20.00000000 #> 2005 21.00000000 22.00000000 23.00000000 24.00000000 #> 2006 25.00000000 26.00000000 27.00000000 28.00000000 #> 2007 29.00000000 30.00000000 31.00000000 32.00000000 #> 2008 33.00000000 34.00000000 35.00000000 36.00000000 #> 2009 37.00000000 38.00000000 39.00000000 40.00000000 #> 2010 41.00000000 42.00000000 43.00000000 44.00000000 #> 2011 45.00000000 46.00000000 47.00000000 48.00000000 #> 2012 49.00000000 50.00000000 51.00000000 52.00000000 #> 2013 53.00000000 54.00000000 55.00000000 56.00000000 #> 2014 57.00000000 58.00000000 59.00000000 60.00000000 #> 2015 61.00000000                                     #' clearly dominatn ts2 series ts1 <- ts(rnorm(50), start = c(1990, 1), frequency = 4) ts2 <- ts(1:100, start = c(1990, 1), frequency = 4) resolve_ts_overlap(ts1, ts2) #>      Qtr1 Qtr2 Qtr3 Qtr4 #> 1990    1    2    3    4 #> 1991    5    6    7    8 #> 1992    9   10   11   12 #> 1993   13   14   15   16 #> 1994   17   18   19   20 #> 1995   21   22   23   24 #> 1996   25   26   27   28 #> 1997   29   30   31   32 #> 1998   33   34   35   36 #> 1999   37   38   39   40 #> 2000   41   42   43   44 #> 2001   45   46   47   48 #> 2002   49   50   51   52 #> 2003   53   54   55   56 #> 2004   57   58   59   60 #> 2005   61   62   63   64 #> 2006   65   66   67   68 #> 2007   69   70   71   72 #> 2008   73   74   75   76 #> 2009   77   78   79   80 #> 2010   81   82   83   84 #> 2011   85   86   87   88 #> 2012   89   90   91   92 #> 2013   93   94   95   96 #> 2014   97   98   99  100"},{"path":"/reference/set_month_to_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Periods to NA — set_month_to_NA","title":"Set Periods to NA — set_month_to_NA","text":"function typically used discard information non-quarter month. .e., data kept January, April, July December otherwise set NA. combination m_to_q function useful turn monthly series quarterly series letting quarter month values represent entire quarter. can useful data interpolated mixing data different frequencies needs converted back regular, quarterly time series.","code":""},{"path":"/reference/set_month_to_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Periods to NA — set_month_to_NA","text":"","code":"set_month_to_NA(series, keep_month = c(1, 4, 7, 10))"},{"path":"/reference/set_month_to_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Periods to NA — set_month_to_NA","text":"series ts object keep_month integer vector denoting months set NA. Defaults c(1,4,7,10)","code":""},{"path":"/reference/set_month_to_NA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Periods to NA — set_month_to_NA","text":"","code":"tsq <- ts(1:20, start = c(1990, 1), frequency = 4) aa <- tsqm(tsq) m_to_q(set_month_to_NA(aa)) #>      Qtr1 Qtr2 Qtr3 Qtr4 #> 1990    1    2    3    4 #> 1991    5    6    7    8 #> 1992    9   10   11   12 #> 1993   13   14   15   16 #> 1994   17   18   19   20"},{"path":"/reference/start_ts_after_internal_nas.html","id":null,"dir":"Reference","previous_headings":"","what":"Start a Time Series after the Last Internal NA — start_ts_after_internal_nas","title":"Start a Time Series after the Last Internal NA — start_ts_after_internal_nas","text":"Internal NAs can cause trouble time series operations X-13-ARIMA SEATS seasonal adjustment. Often, internal NAs occur beginning time series. Thus easy solution problem discard initial part data contains NA values. way small part information lost opposed able seasonally adjust entire series.","code":""},{"path":"/reference/start_ts_after_internal_nas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Start a Time Series after the Last Internal NA — start_ts_after_internal_nas","text":"","code":"start_ts_after_internal_nas(series)"},{"path":"/reference/start_ts_after_internal_nas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Start a Time Series after the Last Internal NA — start_ts_after_internal_nas","text":"series object class ts","code":""},{"path":[]},{"path":"/reference/start_ts_after_internal_nas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Start a Time Series after the Last Internal NA — start_ts_after_internal_nas","text":"","code":"ts1 <- 1:30 ts1[c(3, 6)] <- NA ts1 <- ts(ts1, start = c(2000, 1), frequency = 4) start_ts_after_internal_nas(ts1) #>      Qtr1 Qtr2 Qtr3 Qtr4 #> 2001              7    8 #> 2002    9   10   11   12 #> 2003   13   14   15   16 #> 2004   17   18   19   20 #> 2005   21   22   23   24 #> 2006   25   26   27   28 #> 2007   29   30"},{"path":"/reference/strip_nas.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip Leading / Trailing NAs from a Time Series Object — strip_ts_of_leading_nas","title":"Strip Leading / Trailing NAs from a Time Series Object — strip_ts_of_leading_nas","text":"Removes NAs begin starts time series index first non-NA value.","code":""},{"path":"/reference/strip_nas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip Leading / Trailing NAs from a Time Series Object — strip_ts_of_leading_nas","text":"","code":"strip_ts_of_leading_nas(s)  strip_ts_of_trailing_nas(s)"},{"path":"/reference/strip_nas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip Leading / Trailing NAs from a Time Series Object — strip_ts_of_leading_nas","text":"s object class ts.","code":""},{"path":"/reference/tsplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Time Series — tsplot","title":"Plot Time Series — tsplot","text":"Conveniently plot time series.","code":""},{"path":"/reference/tsplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Time Series — tsplot","text":"","code":"tsplot(   ...,   tsr = NULL,   ci = NULL,   left_as_bar = FALSE,   group_bar_chart = FALSE,   relative_bar_chart = FALSE,   left_as_band = FALSE,   plot_title = NULL,   plot_subtitle = NULL,   plot_subtitle_r = NULL,   find_ticks_function = \"findTicks\",   overall_xlim = NULL,   overall_ylim = NULL,   manual_date_ticks = NULL,   manual_value_ticks_l = NULL,   manual_value_ticks_r = NULL,   manual_ticks_x = NULL,   theme = NULL,   quiet = TRUE,   auto_legend = TRUE,   output_format = \"plot\",   filename = \"tsplot\",   close_graphics_device = TRUE )"},{"path":"/reference/tsplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Time Series — tsplot","text":"... multiple objects class ts list time series. objects passed ... parameter relate standard left y-axis. tsr list time series objects class ts. ci list confidence intervals time series left_as_bar logical series relate left bar drawn (stacked) bar charts? group_bar_chart logical bar chart grouped instead stacked? relative_bar_chart logical time series normalized bars range 0 1? Defaults FALSE. way every sub bar (time series) related global max. Hence expect every single bar reach 1. works stacked grouped charts change anything scale chart. left_as_band logical time series assigned left axis displayed stacked area charts? plot_title character title added plot plot_subtitle character subtitle added plot plot_subtitle_r character second subtitle added top right find_ticks_function function compute ticks. overall_xlim integer overall x-axis limits, defaults NULL. overall_ylim integer overall y-axis limits, defaults NULL. manual_date_ticks character vector manual date ticks. manual_value_ticks_l numeric vector, forcing ticks left y-axis manual_value_ticks_r numeric vector, forcing ticks right y-axis manual_ticks_x numeric vector, forcing ticks x axis theme list default plot output parameters. Defaults NULL, leads init_tsplot_theme called. Please see vignette details tweaking themes. quiet logical suppress output, defaults TRUE. auto_legend logical legends printed automatically, defaults TRUE. output_format character plot drawn screen written file? Possible values \"plot\" screen output \"pdf\". Default \"plot\" filename character Path file written output_format \"pdf\". Default \"tsplot.pdf\" close_graphics_device logical graphics device output file closed tsplot? Set FALSE able make modifications plot tsplot finishes. Default TRUE","code":""},{"path":"/reference/tsplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Time Series — tsplot","text":"ci parameter 3-level list form list(  ts1 = list(   ci_value_1 = list(    ub = upper_bound_ts_object,    lb = lower_bound_ts_object   ),   ...  ),  ... ) See vignette(\"tstools\") details.","code":""},{"path":"/reference/tsqm.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate quarterly time series into monthly — tsqm","title":"Interpolate quarterly time series into monthly — tsqm","text":"Repeat quarterly variables two times generate monthly variable.","code":""},{"path":"/reference/tsqm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate quarterly time series into monthly — tsqm","text":"","code":"tsqm(qts)"},{"path":"/reference/tsqm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate quarterly time series into monthly — tsqm","text":"qts quarterly time series","code":""},{"path":"/reference/tsqm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate quarterly time series into monthly — tsqm","text":"","code":"tsq <- ts(1:20, start = c(1990, 1), frequency = 4) tsqm(tsq) #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 1990   1   1   1   2   2   2   3   3   3   4   4   4 #> 1991   5   5   5   6   6   6   7   7   7   8   8   8 #> 1992   9   9   9  10  10  10  11  11  11  12  12  12 #> 1993  13  13  13  14  14  14  15  15  15  16  16  16 #> 1994  17  17  17  18  18  18  19  19  19  20  20  20"},{"path":"/reference/tstools-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated function(s) in tstools — tstools-deprecated","title":"Deprecated function(s) in tstools — tstools-deprecated","text":"functions provided compatibility older version tstools package.  may eventually completely removed.","code":""},{"path":"/reference/tstools-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated function(s) in tstools — tstools-deprecated","text":"... Parameters passed modern version function","code":""},{"path":[]},{"path":"/reference/wide_to_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a wide format data.frame into a tslist — wide_to_ts","title":"Transform a wide format data.frame into a tslist — wide_to_ts","text":"time series data.frame may stored either rowwise columnswise. identifying column must called date (columnwise) series (rowwise)","code":""},{"path":"/reference/wide_to_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a wide format data.frame into a tslist — wide_to_ts","text":"","code":"wide_to_ts(data, keep_last_freq_only = FALSE, force_xts = FALSE)"},{"path":"/reference/wide_to_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a wide format data.frame into a tslist — wide_to_ts","text":"data data.frame data.frame transformed keep_last_freq_only case frequency change time series, part series returned frequency last observation. useful data start crappy stabilize . Defaults FALSE. Hence last part series returned. force_xts boolean force xts format? Defaults FALSE.","code":""},{"path":"/reference/write_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a list of time series to a file. — write_ts","title":"Export a list of time series to a file. — write_ts","text":"Export list time series file.","code":""},{"path":"/reference/write_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a list of time series to a file. — write_ts","text":"","code":"write_ts(   tl,   fname = NULL,   format = \"csv\",   date_format = NULL,   timestamp_to_fn = FALSE,   round_digits = NULL,   rdata_varname = \"tslist\",   ... )"},{"path":"/reference/write_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a list of time series to a file. — write_ts","text":"tl list time series fname character file name. Defaults NULL, displaying output console. Set file name without file extension order store file. Default file names / location CRAN compliant file name defaults NULL. format character denotes export formats. Defaults .csv. \"csv\", \"xlsx\", \"json\", \"rdata\" available. Spreadsheet formats like csv allow optional parameters. date_format character denotes date format. Defaults NULL. set null default used: Jan 2010. timestamp_to_fn TRUE, current date appended file name. Defaults FALSE. round_digits integer, precision digits. rdata_varname character name list time series within store RData. Defaults \"tslist\". ... additional arguments used spedific formats.","code":""},{"path":"/reference/write_ts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export a list of time series to a file. — write_ts","text":"Additional arguments covered ...","code":""}]
